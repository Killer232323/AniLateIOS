const fetchFromUrl = async (url) => {
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP error ${response.status}`);
        }
        const data = await response.json();
        // Получаем список данных аниме
        const animeData = data.response.map(anime => ({
            id: anime.anime_id,
            title: anime.title,
            views: anime.views,
            cover: `https:${anime.poster.fullsize}`,
            status: status(anime.status)
        }));
        // Преобразуем данные в JSON-строку
        return JSON.stringify(animeData);
    } catch (error) {
        return `Ошибка: ${error.message}`;
    }
}

const fetchFromDetails = async (id = 10907) => {
    try {
        const response = await fetch(`https://api.yani.tv/anime/${id}`);
        if (!response.ok) {
            throw new Error(`HTTP error ${response.status}`);
        }
        const data = await response.json();
        const responce = data.response;
        // Преобразуем данные в объект
        const animeData = {
            //   ["response"]: {
            id: responce.anime_id,
            title: responce.title,
            views: responce.views,
            descr: responce.description,
            cover: `https:${responce.poster.fullsize}`,
            status: status(responce.status)
            //  }
        };
        // Преобразуем данные в JSON-строку
        return JSON.stringify(animeData);
    } catch (error) {
        return `Ошибка: ${error.message}`;
    }
}

const fetchVideo = async (id) => {
    try {
        const response = await fetch(`https://api.yani.tv/anime/${id}/videos`);
        if (!response.ok) throw new Error(`HTTP error ${response.status}`);

        const data = await response.json();
        const result = [];

        data.response.forEach(video => {
            const {dubbing: dubbingName, player: playerName} = video.data;
            let dubbing = result.find(d => d.name === dubbingName) || {
                id: video.video_id,
                name: dubName(dubbingName),
                players: []
            };

            if (!result.includes(dubbing)) result.push(dubbing);
            let player = dubbing.players.find(p => p.name === playerName) || {
                name: playerName,
                videos: []
            };

            if (!dubbing.players.includes(player)) dubbing.players.push(player);
            player.videos.push({
                id: video.video_id,
                url: video.iframe_url,
                position: parseInt(video.number, 10)
            });
        });

        return JSON.stringify(result, null, 2);
    } catch (error) {
        return `Ошибка: ${error.message}`;
    }
};
const dubName = (str) => {
    return str.replace("Озвучка ", "")
}

const status = (int) => {
    switch (int) {
        case 0: return 3
        case 1: return 2
        case 2: return 1
        default: return 0
    }
}

window.Yummyanime1fetchPopular = async (offset = 0) => {
    try {
        const url = `https://api.yani.tv/anime?sort=rating&offset=${offset * 30}&limit=30`;
        const data = await fetchFromUrl(url);
        console.log(data)
        return data;
    } catch (error) {
        console.error(error)
        return error;
    }
}

window.Yummyanime1fetchLatestUpdates = async (offset = 0) => {
    try {
        const url = `https://api.yani.tv/anime?offset=${offset * 30}&limit=30`;
        const data = await fetchFromUrl(url);
        console.log(data)
        return data;
    } catch (error) {
        console.error(error)
        return error;
    }
}

window.Yummyanime1fetchVideos = (id = 10907) => fetchVideo(id);
window.Yummyanime1fetchDetails = (id = 10907) => fetchFromDetails(id);
